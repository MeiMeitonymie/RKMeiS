#ifdef USE_SPHERICAL_HARMONICS_P1
#ifdef USE_DOUBLE

#ifdef IS_2D

void pn_clump_value(double w[3])
{
    
    // Source values
    w[0] =  + 0.01250000000000000 * 80./DT;
    w[1] =  - 0.00000000000000000 * 80./DT;
    w[2] =  - 0.01529974556256406 * 80./DT;

}



#else  // IS_2D

void pn_clump_value( double w[4])
{
    
    // Source values 
    //OK

    w[0] =   1.00000000000000000/DT;
    w[1] =   0.00000000000000001/DT;
    w[2] =   1.73096861321123185/DT;
    w[3] = - 0.00000000000000001/DT;

}



#endif // IS_2D

#else  // USE_DOUBLE

#ifdef IS_2D

void pn_clump_value(float w[3])
{
    
    // Source values
    w[0] =  + 0.01250000F * 80.F/(float)DT;
    w[1] =  - 0.00000000F * 80.F/(float)DT;
    w[2] =  - 0.01529975F * 80.F/(float)DT;

}



#else  // IS_2D 

void pn_clump_value(float w[4])
{
    
    // Source values
    //OK
    w[0] = 1.00000000F/(float)DT;
    w[1] = 0.00000000F/(float)DT;
    w[2] = 1.73096861F/(float)DT;
    w[3] = -0.00000000F/(float)DT;

}



#endif // IS_2D

#endif // USE_DOUBLE
#endif // USE_SPHERICAL_HARMONICS_P1
#ifdef USE_SPHERICAL_HARMONICS_P3
#ifdef USE_DOUBLE

#ifdef IS_2D

void pn_clump_value(double w[10])
{
    

    
    // Source values
    w[0] =  + 0.01250000000000000 * 80./DT;
    w[1] =  - 0.00000000000000000 * 80./DT;
    w[2] =  - 0.01529974556256406 * 80./DT;
    w[3] =  - 0.00000000000000000 * 80./DT;
    w[4] =  - 0.00000000000000000 * 80./DT;
    w[5] =  + 0.01707359254121643 * 80./DT;
    w[6] =  - 0.00000000000000000 * 80./DT;
    w[7] =  - 0.00000000000000000 * 80./DT;
    w[8] =  - 0.00000000000000000 * 80./DT;
    w[9] =  - 0.01838404766658733 * 80./DT;

}



#else  // IS_2D

void pn_clump_value( double w[16])
{
    

    
    // Source values
    //OK
    w[0] = 1.00000000000000000/DT;
    w[1] = 0.00000000000000001/DT;
    w[2] = 1.73096861321123185/DT;
    w[3] = -0.00000000000000001/DT;
    w[4] = -0.00170525596950163/DT;
    w[5] = 0.00000000000000001/DT;
    w[6] = 2.23188055519624395/DT;
    w[7] = -0.00000000000000001/DT;
    w[8] = -0.00170525596950163/DT;
    w[9] = -0.00000000000000000/DT;
    w[10] = -0.00450318542971045/DT;
    w[11] = 0.00000000000000002/DT;
    w[12] = 2.63585601040782436/DT;
    w[13] = -0.00000000000000002/DT;
    w[14] = -0.00450318542971045/DT;
    w[15] = 0.00000000000000000/DT;

}



#endif // IS_2D

#else  // USE_DOUBLE

#ifdef IS_2D

void pn_clump_value(float w[10])
{
    
    // Source values
    w[0] =  + 0.01250000F * 80.F/(float)DT;
    w[1] =  - 0.00000000F * 80.F/(float)DT;
    w[2] =  - 0.01529975F * 80.F/(float)DT;
    w[3] =  - 0.00000000F * 80.F/(float)DT;
    w[4] =  - 0.00000000F * 80.F/(float)DT;
    w[5] =  + 0.01707359F * 80.F/(float)DT;
    w[6] =  - 0.00000000F * 80.F/(float)DT;
    w[7] =  - 0.00000000F * 80.F/(float)DT;
    w[8] =  - 0.00000000F * 80.F/(float)DT;
    w[9] =  - 0.01838405F * 80.F/(float)DT;

}



#else  // IS_2D 

void pn_clump_value(float w[16])
{
    
    // Source values
    //OK
    w[0] = 1.00000000F/(float)DT;
    w[1] = 0.00000000F/(float)DT;
    w[2] = 1.73096861F/(float)DT;
    w[3] = -0.00000000F/(float)DT;
    w[4] = -0.00170526F/(float)DT;
    w[5] = 0.00000000F/(float)DT;
    w[6] = 2.23188056F/(float)DT;
    w[7] = -0.00000000F/(float)DT;
    w[8] = -0.00170526F/(float)DT;
    w[9] = -0.00000000F/(float)DT;
    w[10] = -0.00450319F/(float)DT;
    w[11] = 0.00000000F/(float)DT;
    w[12] = 2.63585601F/(float)DT;
    w[13] = -0.00000000F/(float)DT;
    w[14] = -0.00450319F/(float)DT;
    w[15] = 0.00000000F/(float)DT;

}



#endif // IS_2D

#endif // USE_DOUBLE
#endif // USE_SPHERICAL_HARMONICS_P3
#ifdef USE_SPHERICAL_HARMONICS_P5
#ifdef USE_DOUBLE

#ifdef IS_2D

void pn_clump_value(double w[21])
{
    

    
    // Source values
    w[0] =  + 0.01250000000000000 * 80./DT;
    w[1] =  - 0.00000000000000000 * 80./DT;
    w[2] =  - 0.01529974556256406 * 80./DT;
    w[3] =  - 0.00000000000000000 * 80./DT;
    w[4] =  - 0.00000000000000000 * 80./DT;
    w[5] =  + 0.01707359254121643 * 80./DT;
    w[6] =  - 0.00000000000000000 * 80./DT;
    w[7] =  - 0.00000000000000000 * 80./DT;
    w[8] =  - 0.00000000000000000 * 80./DT;
    w[9] =  - 0.01838404766658733 * 80./DT;
    w[10] =  - 0.00000000000000000 * 80./DT;
    w[11] =  - 0.00000000000000000 * 80./DT;
    w[12] =  - 0.00000000000000000 * 80./DT;
    w[13] =  - 0.00000000000000000 * 80./DT;
    w[14] =  + 0.01941410437909303 * 80./DT;
    w[15] =  - 0.00000000000000000 * 80./DT;
    w[16] =  - 0.00000000000000000 * 80./DT;
    w[17] =  - 0.00000000000000000 * 80./DT;
    w[18] =  - 0.00000000000000000 * 80./DT;
    w[19] =  - 0.00000000000000000 * 80./DT;
    w[20] =  - 0.02024747150211771 * 80./DT;

}



#else  // IS_2D

void pn_clump_value( double w[36])
{
    

    
    // Source values
    //OK
    w[0] = 1.00000000000000000/DT;
    w[1] = 0.00000000000000001/DT;
    w[2] = 1.73096861321123185/DT;
    w[3] = -0.00000000000000001/DT;
    w[4] = -0.00170525596950163/DT;
    w[5] = 0.00000000000000001/DT;
    w[6] = 2.23188055519624395/DT;
    w[7] = -0.00000000000000001/DT;
    w[8] = -0.00170525596950163/DT;
    w[9] = -0.00000000000000000/DT;
    w[10] = -0.00450318542971045/DT;
    w[11] = 0.00000000000000002/DT;
    w[12] = 2.63585601040782436/DT;
    w[13] = -0.00000000000000002/DT;
    w[14] = -0.00450318542971045/DT;
    w[15] = 0.00000000000000000/DT;
    w[16] = 0.00000715790425901/DT;
    w[17] = -0.00000000000000000/DT;
    w[18] = -0.00882199000374003/DT;
    w[19] = 0.00000000000000003/DT;
    w[20] = 2.98133464020938987/DT;
    w[21] = -0.00000000000000003/DT;
    w[22] = -0.00882199000374002/DT;
    w[23] = 0.00000000000000000/DT;
    w[24] = 0.00000715790425901/DT;
    w[25] = 0.00000000000000000/DT;
    w[26] = 0.00002403320496504/DT;
    w[27] = -0.00000000000000000/DT;
    w[28] = -0.01485164870867023/DT;
    w[29] = 0.00000000000000004/DT;
    w[30] = 3.28574408611197377/DT;
    w[31] = -0.00000000000000004/DT;
    w[32] = -0.01485164870867023/DT;
    w[33] = 0.00000000000000000/DT;
    w[34] = 0.00002403320496504/DT;
    w[35] = -0.00000000000000000/DT;

}



#endif // IS_2D

#else  // USE_DOUBLE

#ifdef IS_2D

void pn_clump_value(float w[21])
{
    
    // Source values
    w[0] =  + 0.01250000F * 80.F/(float)DT;
    w[1] =  - 0.00000000F * 80.F/(float)DT;
    w[2] =  - 0.01529975F * 80.F/(float)DT;
    w[3] =  - 0.00000000F * 80.F/(float)DT;
    w[4] =  - 0.00000000F * 80.F/(float)DT;
    w[5] =  + 0.01707359F * 80.F/(float)DT;
    w[6] =  - 0.00000000F * 80.F/(float)DT;
    w[7] =  - 0.00000000F * 80.F/(float)DT;
    w[8] =  - 0.00000000F * 80.F/(float)DT;
    w[9] =  - 0.01838405F * 80.F/(float)DT;
    w[10] =  - 0.00000000F * 80.F/(float)DT;
    w[11] =  - 0.00000000F * 80.F/(float)DT;
    w[12] =  - 0.00000000F * 80.F/(float)DT;
    w[13] =  - 0.00000000F * 80.F/(float)DT;
    w[14] =  + 0.01941410F * 80.F/(float)DT;
    w[15] =  - 0.00000000F * 80.F/(float)DT;
    w[16] =  - 0.00000000F * 80.F/(float)DT;
    w[17] =  - 0.00000000F * 80.F/(float)DT;
    w[18] =  - 0.00000000F * 80.F/(float)DT;
    w[19] =  - 0.00000000F * 80.F/(float)DT;
    w[20] =  - 0.02024747F * 80.F/(float)DT;

}



#else  // IS_2D 

void pn_clump_value(float w[36])
{
    
    // Source values
    //OK
    w[0] = 1.00000000F/(float)DT;
    w[1] = 0.00000000F/(float)DT;
    w[2] = 1.73096861F/(float)DT;
    w[3] = -0.00000000F/(float)DT;
    w[4] = -0.00170526F/(float)DT;
    w[5] = 0.00000000F/(float)DT;
    w[6] = 2.23188056F/(float)DT;
    w[7] = -0.00000000F/(float)DT;
    w[8] = -0.00170526F/(float)DT;
    w[9] = -0.00000000F/(float)DT;
    w[10] = -0.00450319F/(float)DT;
    w[11] = 0.00000000F/(float)DT;
    w[12] = 2.63585601F/(float)DT;
    w[13] = -0.00000000F/(float)DT;
    w[14] = -0.00450319F/(float)DT;
    w[15] = 0.00000000F/(float)DT;
    w[16] = 0.00000716F/(float)DT;
    w[17] = -0.00000000F/(float)DT;
    w[18] = -0.00882199F/(float)DT;
    w[19] = 0.00000000F/(float)DT;
    w[20] = 2.98133464F/(float)DT;
    w[21] = -0.00000000F/(float)DT;
    w[22] = -0.00882199F/(float)DT;
    w[23] = 0.00000000F/(float)DT;
    w[24] = 0.00000716F/(float)DT;
    w[25] = 0.00000000F/(float)DT;
    w[26] = 0.00002403F/(float)DT;
    w[27] = -0.00000000F/(float)DT;
    w[28] = -0.01485165F/(float)DT;
    w[29] = 0.00000000F/(float)DT;
    w[30] = 3.28574409F/(float)DT;
    w[31] = -0.00000000F/(float)DT;
    w[32] = -0.01485165F/(float)DT;
    w[33] = 0.00000000F/(float)DT;
    w[34] = 0.00002403F/(float)DT;
    w[35] = -0.00000000F/(float)DT;

}



#endif // IS_2D

#endif // USE_DOUBLE
#endif // USE_SPHERICAL_HARMONICS_P5
#ifdef USE_SPHERICAL_HARMONICS_P7
#ifdef USE_DOUBLE

#ifdef IS_2D

void pn_clump_value(double w[36])
{
    

    
    // Source values
    w[0] =  + 0.01250000000000000 * 80./DT;
    w[1] =  - 0.00000000000000000 * 80./DT;
    w[2] =  - 0.01529974556256406 * 80./DT;
    w[3] =  - 0.00000000000000000 * 80./DT;
    w[4] =  - 0.00000000000000000 * 80./DT;
    w[5] =  + 0.01707359254121643 * 80./DT;
    w[6] =  - 0.00000000000000000 * 80./DT;
    w[7] =  - 0.00000000000000000 * 80./DT;
    w[8] =  - 0.00000000000000000 * 80./DT;
    w[9] =  - 0.01838404766658733 * 80./DT;
    w[10] =  - 0.00000000000000000 * 80./DT;
    w[11] =  - 0.00000000000000000 * 80./DT;
    w[12] =  - 0.00000000000000000 * 80./DT;
    w[13] =  - 0.00000000000000000 * 80./DT;
    w[14] =  + 0.01941410437909303 * 80./DT;
    w[15] =  - 0.00000000000000000 * 80./DT;
    w[16] =  - 0.00000000000000000 * 80./DT;
    w[17] =  - 0.00000000000000000 * 80./DT;
    w[18] =  - 0.00000000000000000 * 80./DT;
    w[19] =  - 0.00000000000000000 * 80./DT;
    w[20] =  - 0.02024747150211771 * 80./DT;
    w[21] =  - 0.00000000000000000 * 80./DT;
    w[22] =  - 0.00000000000000000 * 80./DT;
    w[23] =  - 0.00000000000000000 * 80./DT;
    w[24] =  - 0.00000000000000000 * 80./DT;
    w[25] =  - 0.00000000000000000 * 80./DT;
    w[26] =  - 0.00000000000000000 * 80./DT;
    w[27] =  + 0.02092984802870677 * 80./DT;
    w[28] =  - 0.00000000000000000 * 80./DT;
    w[29] =  - 0.00000000000000000 * 80./DT;
    w[30] =  - 0.00000000000000000 * 80./DT;
    w[31] =  - 0.00000000000000000 * 80./DT;
    w[32] =  - 0.00000000000000000 * 80./DT;
    w[33] =  - 0.00000000000000000 * 80./DT;
    w[34] =  - 0.00000000000000000 * 80./DT;
    w[35] =  - 0.02148914042985427 * 80./DT;

}



#else  // IS_2D

void pn_clump_value( double w[64])
{
    

    
    // Source values
    //OK
    w[0] = 1.00000000000000000/DT;
    w[1] = 0.00000000000000001/DT;
    w[2] = 1.73096861321123185/DT;
    w[3] = -0.00000000000000001/DT;
    w[4] = -0.00170525596950163/DT;
    w[5] = 0.00000000000000001/DT;
    w[6] = 2.23188055519624395/DT;
    w[7] = -0.00000000000000001/DT;
    w[8] = -0.00170525596950163/DT;
    w[9] = -0.00000000000000000/DT;
    w[10] = -0.00450318542971045/DT;
    w[11] = 0.00000000000000002/DT;
    w[12] = 2.63585601040782436/DT;
    w[13] = -0.00000000000000002/DT;
    w[14] = -0.00450318542971045/DT;
    w[15] = 0.00000000000000000/DT;
    w[16] = 0.00000715790425901/DT;
    w[17] = -0.00000000000000000/DT;
    w[18] = -0.00882199000374003/DT;
    w[19] = 0.00000000000000003/DT;
    w[20] = 2.98133464020938987/DT;
    w[21] = -0.00000000000000003/DT;
    w[22] = -0.00882199000374002/DT;
    w[23] = 0.00000000000000000/DT;
    w[24] = 0.00000715790425901/DT;
    w[25] = 0.00000000000000000/DT;
    w[26] = 0.00002403320496504/DT;
    w[27] = -0.00000000000000000/DT;
    w[28] = -0.01485164870867023/DT;
    w[29] = 0.00000000000000004/DT;
    w[30] = 3.28574408611197377/DT;
    w[31] = -0.00000000000000004/DT;
    w[32] = -0.01485164870867023/DT;
    w[33] = 0.00000000000000000/DT;
    w[34] = 0.00002403320496504/DT;
    w[35] = -0.00000000000000000/DT;
    w[36] = -0.00000013199132439/DT;
    w[37] = 0.00000000000000000/DT;
    w[38] = 0.00005805763461744/DT;
    w[39] = -0.00000000000000000/DT;
    w[40] = -0.02274785095197682/DT;
    w[41] = 0.00000000000000005/DT;
    w[42] = 3.55868357405310620/DT;
    w[43] = -0.00000000000000005/DT;
    w[44] = -0.02274785095197682/DT;
    w[45] = 0.00000000000000000/DT;
    w[46] = 0.00005805763461744/DT;
    w[47] = -0.00000000000000000/DT;
    w[48] = -0.00000013199132439/DT;
    w[49] = -0.00000000000000000/DT;
    w[50] = -0.00000050885848363/DT;
    w[51] = 0.00000000000000000/DT;
    w[52] = 0.00011895254504411/DT;
    w[53] = -0.00000000000000000/DT;
    w[54] = -0.03264052648369914/DT;
    w[55] = 0.00000000000000007/DT;
    w[56] = 3.80607677152118695/DT;
    w[57] = -0.00000000000000007/DT;
    w[58] = -0.03264052648369914/DT;
    w[59] = 0.00000000000000000/DT;
    w[60] = 0.00011895254504411/DT;
    w[61] = -0.00000000000000000/DT;
    w[62] = -0.00000050885848363/DT;
    w[63] = 0.00000000000000000/DT;
    

}



#endif // IS_2D

#else  // USE_DOUBLE

#ifdef IS_2D

void pn_clump_value(float w[36])
{
    
    // Source values
    w[0] =  + 0.01250000F * 80.F/(float)DT;
    w[1] =  - 0.00000000F * 80.F/(float)DT;
    w[2] =  - 0.01529975F * 80.F/(float)DT;
    w[3] =  - 0.00000000F * 80.F/(float)DT;
    w[4] =  - 0.00000000F * 80.F/(float)DT;
    w[5] =  + 0.01707359F * 80.F/(float)DT;
    w[6] =  - 0.00000000F * 80.F/(float)DT;
    w[7] =  - 0.00000000F * 80.F/(float)DT;
    w[8] =  - 0.00000000F * 80.F/(float)DT;
    w[9] =  - 0.01838405F * 80.F/(float)DT;
    w[10] =  - 0.00000000F * 80.F/(float)DT;
    w[11] =  - 0.00000000F * 80.F/(float)DT;
    w[12] =  - 0.00000000F * 80.F/(float)DT;
    w[13] =  - 0.00000000F * 80.F/(float)DT;
    w[14] =  + 0.01941410F * 80.F/(float)DT;
    w[15] =  - 0.00000000F * 80.F/(float)DT;
    w[16] =  - 0.00000000F * 80.F/(float)DT;
    w[17] =  - 0.00000000F * 80.F/(float)DT;
    w[18] =  - 0.00000000F * 80.F/(float)DT;
    w[19] =  - 0.00000000F * 80.F/(float)DT;
    w[20] =  - 0.02024747F * 80.F/(float)DT;
    w[21] =  - 0.00000000F * 80.F/(float)DT;
    w[22] =  - 0.00000000F * 80.F/(float)DT;
    w[23] =  - 0.00000000F * 80.F/(float)DT;
    w[24] =  - 0.00000000F * 80.F/(float)DT;
    w[25] =  - 0.00000000F * 80.F/(float)DT;
    w[26] =  - 0.00000000F * 80.F/(float)DT;
    w[27] =  + 0.02092985F * 80.F/(float)DT;
    w[28] =  - 0.00000000F * 80.F/(float)DT;
    w[29] =  - 0.00000000F * 80.F/(float)DT;
    w[30] =  - 0.00000000F * 80.F/(float)DT;
    w[31] =  - 0.00000000F * 80.F/(float)DT;
    w[32] =  - 0.00000000F * 80.F/(float)DT;
    w[33] =  - 0.00000000F * 80.F/(float)DT;
    w[34] =  - 0.00000000F * 80.F/(float)DT;
    w[35] =  - 0.02148914F * 80.F/(float)DT;

}



#else  // IS_2D 

void pn_clump_value(float w[64])
{
    
    // Source values
    //OK
    w[0] = 1.00000000F/(float)DT;
    w[1] = 0.00000000F/(float)DT;
    w[2] = 1.73096861F/(float)DT;
    w[3] = -0.00000000F/(float)DT;
    w[4] = -0.00170526F/(float)DT;
    w[5] = 0.00000000F/(float)DT;
    w[6] = 2.23188056F/(float)DT;
    w[7] = -0.00000000F/(float)DT;
    w[8] = -0.00170526F/(float)DT;
    w[9] = -0.00000000F/(float)DT;
    w[10] = -0.00450319F/(float)DT;
    w[11] = 0.00000000F/(float)DT;
    w[12] = 2.63585601F/(float)DT;
    w[13] = -0.00000000F/(float)DT;
    w[14] = -0.00450319F/(float)DT;
    w[15] = 0.00000000F/(float)DT;
    w[16] = 0.00000716F/(float)DT;
    w[17] = -0.00000000F/(float)DT;
    w[18] = -0.00882199F/(float)DT;
    w[19] = 0.00000000F/(float)DT;
    w[20] = 2.98133464F/(float)DT;
    w[21] = -0.00000000F/(float)DT;
    w[22] = -0.00882199F/(float)DT;
    w[23] = 0.00000000F/(float)DT;
    w[24] = 0.00000716F/(float)DT;
    w[25] = 0.00000000F/(float)DT;
    w[26] = 0.00002403F/(float)DT;
    w[27] = -0.00000000F/(float)DT;
    w[28] = -0.01485165F/(float)DT;
    w[29] = 0.00000000F/(float)DT;
    w[30] = 3.28574409F/(float)DT;
    w[31] = -0.00000000F/(float)DT;
    w[32] = -0.01485165F/(float)DT;
    w[33] = 0.00000000F/(float)DT;
    w[34] = 0.00002403F/(float)DT;
    w[35] = -0.00000000F/(float)DT;
    w[36] = -0.00000013F/(float)DT;
    w[37] = 0.00000000F/(float)DT;
    w[38] = 0.00005806F/(float)DT;
    w[39] = -0.00000000F/(float)DT;
    w[40] = -0.02274785F/(float)DT;
    w[41] = 0.00000000F/(float)DT;
    w[42] = 3.55868357F/(float)DT;
    w[43] = -0.00000000F/(float)DT;
    w[44] = -0.02274785F/(float)DT;
    w[45] = 0.00000000F/(float)DT;
    w[46] = 0.00005806F/(float)DT;
    w[47] = -0.00000000F/(float)DT;
    w[48] = -0.00000013F/(float)DT;
    w[49] = -0.00000000F/(float)DT;
    w[50] = -0.00000051F/(float)DT;
    w[51] = 0.00000000F/(float)DT;
    w[52] = 0.00011895F/(float)DT;
    w[53] = -0.00000000F/(float)DT;
    w[54] = -0.03264053F/(float)DT;
    w[55] = 0.00000000F/(float)DT;
    w[56] = 3.80607677F/(float)DT;
    w[57] = -0.00000000F/(float)DT;
    w[58] = -0.03264053F/(float)DT;
    w[59] = 0.00000000F/(float)DT;
    w[60] = 0.00011895F/(float)DT;
    w[61] = -0.00000000F/(float)DT;
    w[62] = -0.00000051F/(float)DT;
    w[63] = 0.00000000F/(float)DT;

}



#endif // IS_2D

#endif // USE_DOUBLE
#endif // USE_SPHERICAL_HARMONICS_P7
#ifdef USE_SPHERICAL_HARMONICS_P9
#ifdef USE_DOUBLE

#ifdef IS_2D

void pn_clump_value(double w[55])
{
    

    
    // Source values
    w[0] =  + 0.01250000000000000 * 80./DT;
    w[1] =  - 0.00000000000000000 * 80./DT;
    w[2] =  - 0.01529974556256406 * 80./DT;
    w[3] =  - 0.00000000000000000 * 80./DT;
    w[4] =  - 0.00000000000000000 * 80./DT;
    w[5] =  + 0.01707359254121643 * 80./DT;
    w[6] =  - 0.00000000000000000 * 80./DT;
    w[7] =  - 0.00000000000000000 * 80./DT;
    w[8] =  - 0.00000000000000000 * 80./DT;
    w[9] =  - 0.01838404766658733 * 80./DT;
    w[10] =  - 0.00000000000000000 * 80./DT;
    w[11] =  - 0.00000000000000000 * 80./DT;
    w[12] =  - 0.00000000000000000 * 80./DT;
    w[13] =  - 0.00000000000000000 * 80./DT;
    w[14] =  + 0.01941410437909303 * 80./DT;
    w[15] =  - 0.00000000000000000 * 80./DT;
    w[16] =  - 0.00000000000000000 * 80./DT;
    w[17] =  - 0.00000000000000000 * 80./DT;
    w[18] =  - 0.00000000000000000 * 80./DT;
    w[19] =  - 0.00000000000000000 * 80./DT;
    w[20] =  - 0.02024747150211771 * 80./DT;
    w[21] =  - 0.00000000000000000 * 80./DT;
    w[22] =  - 0.00000000000000000 * 80./DT;
    w[23] =  - 0.00000000000000000 * 80./DT;
    w[24] =  - 0.00000000000000000 * 80./DT;
    w[25] =  - 0.00000000000000000 * 80./DT;
    w[26] =  - 0.00000000000000000 * 80./DT;
    w[27] =  + 0.02092984802870677 * 80./DT;
    w[28] =  - 0.00000000000000000 * 80./DT;
    w[29] =  - 0.00000000000000000 * 80./DT;
    w[30] =  - 0.00000000000000000 * 80./DT;
    w[31] =  - 0.00000000000000000 * 80./DT;
    w[32] =  - 0.00000000000000000 * 80./DT;
    w[33] =  - 0.00000000000000000 * 80./DT;
    w[34] =  - 0.00000000000000000 * 80./DT;
    w[35] =  - 0.02148914042985427 * 80./DT;
    w[36] =  - 0.00000000000000000 * 80./DT;
    w[37] =  - 0.00000000000000000 * 80./DT;
    w[38] =  - 0.00000000000000000 * 80./DT;
    w[39] =  - 0.00000000000000000 * 80./DT;
    w[40] =  - 0.00000000000000000 * 80./DT;
    w[41] =  - 0.00000000000000000 * 80./DT;
    w[42] =  - 0.00000000000000000 * 80./DT;
    w[43] =  - 0.00000000000000000 * 80./DT;
    w[44] =  + 0.02194380839716444 * 80./DT;
    w[45] =  - 0.00000000000000000 * 80./DT;
    w[46] =  - 0.00000000000000000 * 80./DT;
    w[47] =  - 0.00000000000000000 * 80./DT;
    w[48] =  - 0.00000000000000000 * 80./DT;
    w[49] =  - 0.00000000000000000 * 80./DT;
    w[50] =  - 0.00000000000000000 * 80./DT;
    w[51] =  - 0.00000000000000000 * 80./DT;
    w[52] =  - 0.00000000000000000 * 80./DT;
    w[53] =  - 0.00000000000000000 * 80./DT;
    w[54] =  - 0.02230684613202838 * 80./DT;

}



#else  // IS_2D

void pn_clump_value( double w[100])
{
    

    
    // Source values
    //OK
    w[0] = 1.00000000000000000/DT;
    w[1] = 0.00000000000000001/DT;
    w[2] = 1.73096861321123185/DT;
    w[3] = -0.00000000000000001/DT;
    w[4] = -0.00170525596950163/DT;
    w[5] = 0.00000000000000001/DT;
    w[6] = 2.23188055519624395/DT;
    w[7] = -0.00000000000000001/DT;
    w[8] = -0.00170525596950163/DT;
    w[9] = -0.00000000000000000/DT;
    w[10] = -0.00450318542971045/DT;
    w[11] = 0.00000000000000002/DT;
    w[12] = 2.63585601040782436/DT;
    w[13] = -0.00000000000000002/DT;
    w[14] = -0.00450318542971045/DT;
    w[15] = 0.00000000000000000/DT;
    w[16] = 0.00000715790425901/DT;
    w[17] = -0.00000000000000000/DT;
    w[18] = -0.00882199000374003/DT;
    w[19] = 0.00000000000000003/DT;
    w[20] = 2.98133464020938987/DT;
    w[21] = -0.00000000000000003/DT;
    w[22] = -0.00882199000374002/DT;
    w[23] = 0.00000000000000000/DT;
    w[24] = 0.00000715790425901/DT;
    w[25] = 0.00000000000000000/DT;
    w[26] = 0.00002403320496504/DT;
    w[27] = -0.00000000000000000/DT;
    w[28] = -0.01485164870867023/DT;
    w[29] = 0.00000000000000004/DT;
    w[30] = 3.28574408611197377/DT;
    w[31] = -0.00000000000000004/DT;
    w[32] = -0.01485164870867023/DT;
    w[33] = 0.00000000000000000/DT;
    w[34] = 0.00002403320496504/DT;
    w[35] = -0.00000000000000000/DT;
    w[36] = -0.00000013199132439/DT;
    w[37] = 0.00000000000000000/DT;
    w[38] = 0.00005805763461744/DT;
    w[39] = -0.00000000000000000/DT;
    w[40] = -0.02274785095197682/DT;
    w[41] = 0.00000000000000005/DT;
    w[42] = 3.55868357405310620/DT;
    w[43] = -0.00000000000000005/DT;
    w[44] = -0.02274785095197682/DT;
    w[45] = 0.00000000000000000/DT;
    w[46] = 0.00005805763461744/DT;
    w[47] = -0.00000000000000000/DT;
    w[48] = -0.00000013199132439/DT;
    w[49] = -0.00000000000000000/DT;
    w[50] = -0.00000050885848363/DT;
    w[51] = 0.00000000000000000/DT;
    w[52] = 0.00011895254504411/DT;
    w[53] = -0.00000000000000000/DT;
    w[54] = -0.03264052648369914/DT;
    w[55] = 0.00000000000000007/DT;
    w[56] = 3.80607677152118695/DT;
    w[57] = -0.00000000000000007/DT;
    w[58] = -0.03264052648369914/DT;
    w[59] = 0.00000000000000000/DT;
    w[60] = 0.00011895254504411/DT;
    w[61] = -0.00000000000000000/DT;
    w[62] = -0.00000050885848363/DT;
    w[63] = 0.00000000000000000/DT;
    w[64] = 0.00000000128664625/DT;
    w[65] = -0.00000000000000000/DT;
    w[66] = -0.00000053653256184/DT;
    w[67] = 0.00000000000000000/DT;
    w[68] = 0.00021817688458739/DT;
    w[69] = -0.00000000000000000/DT;
    w[70] = -0.04463740372717866/DT;
    w[71] = 0.00000000000000008/DT;
    w[72] = 4.03186783896272782/DT;
    w[73] = -0.00000000000000008/DT;
    w[74] = -0.04463740372717866/DT;
    w[75] = 0.00000000000000000/DT;
    w[76] = 0.00021817688458739/DT;
    w[77] = -0.00000000000000000/DT;
    w[78] = -0.00000053653256184/DT;
    w[79] = 0.00000000000000000/DT;
    w[80] = 0.00000000128664625/DT;
    w[81] = 0.00000000000000000/DT;
    w[82] = 0.00000000557727326/DT;
    w[83] = -0.00000000000000000/DT;
    w[84] = -0.00000126029183083/DT;
    w[85] = 0.00000000000000000/DT;
    w[86] = 0.00036980315977988/DT;
    w[87] = -0.00000000000000000/DT;
    w[88] = -0.05882615062962795/DT;
    w[89] = 0.00000000000000009/DT;
    w[90] = 4.23883260795077277/DT;
    w[91] = -0.00000000000000009/DT;
    w[92] = -0.05882615062962796/DT;
    w[93] = 0.00000000000000000/DT;
    w[94] = 0.00036980315977988/DT;
    w[95] = -0.00000000000000000/DT;
    w[96] = -0.00000126029183083/DT;
    w[97] = 0.00000000000000000/DT;
    w[98] = 0.00000000557727326/DT;
    w[99] = -0.00000000000000000/DT;

}



#endif // IS_2D

#else  // USE_DOUBLE

#ifdef IS_2D

void pn_clump_value(float w[55])
{
    
    // Source values
    w[0] =  + 0.01250000F * 80.F/(float)DT;
    w[1] =  - 0.00000000F * 80.F/(float)DT;
    w[2] =  - 0.01529975F * 80.F/(float)DT;
    w[3] =  - 0.00000000F * 80.F/(float)DT;
    w[4] =  - 0.00000000F * 80.F/(float)DT;
    w[5] =  + 0.01707359F * 80.F/(float)DT;
    w[6] =  - 0.00000000F * 80.F/(float)DT;
    w[7] =  - 0.00000000F * 80.F/(float)DT;
    w[8] =  - 0.00000000F * 80.F/(float)DT;
    w[9] =  - 0.01838405F * 80.F/(float)DT;
    w[10] =  - 0.00000000F * 80.F/(float)DT;
    w[11] =  - 0.00000000F * 80.F/(float)DT;
    w[12] =  - 0.00000000F * 80.F/(float)DT;
    w[13] =  - 0.00000000F * 80.F/(float)DT;
    w[14] =  + 0.01941410F * 80.F/(float)DT;
    w[15] =  - 0.00000000F * 80.F/(float)DT;
    w[16] =  - 0.00000000F * 80.F/(float)DT;
    w[17] =  - 0.00000000F * 80.F/(float)DT;
    w[18] =  - 0.00000000F * 80.F/(float)DT;
    w[19] =  - 0.00000000F * 80.F/(float)DT;
    w[20] =  - 0.02024747F * 80.F/(float)DT;
    w[21] =  - 0.00000000F * 80.F/(float)DT;
    w[22] =  - 0.00000000F * 80.F/(float)DT;
    w[23] =  - 0.00000000F * 80.F/(float)DT;
    w[24] =  - 0.00000000F * 80.F/(float)DT;
    w[25] =  - 0.00000000F * 80.F/(float)DT;
    w[26] =  - 0.00000000F * 80.F/(float)DT;
    w[27] =  + 0.02092985F * 80.F/(float)DT;
    w[28] =  - 0.00000000F * 80.F/(float)DT;
    w[29] =  - 0.00000000F * 80.F/(float)DT;
    w[30] =  - 0.00000000F * 80.F/(float)DT;
    w[31] =  - 0.00000000F * 80.F/(float)DT;
    w[32] =  - 0.00000000F * 80.F/(float)DT;
    w[33] =  - 0.00000000F * 80.F/(float)DT;
    w[34] =  - 0.00000000F * 80.F/(float)DT;
    w[35] =  - 0.02148914F * 80.F/(float)DT;
    w[36] =  - 0.00000000F * 80.F/(float)DT;
    w[37] =  - 0.00000000F * 80.F/(float)DT;
    w[38] =  - 0.00000000F * 80.F/(float)DT;
    w[39] =  - 0.00000000F * 80.F/(float)DT;
    w[40] =  - 0.00000000F * 80.F/(float)DT;
    w[41] =  - 0.00000000F * 80.F/(float)DT;
    w[42] =  - 0.00000000F * 80.F/(float)DT;
    w[43] =  - 0.00000000F * 80.F/(float)DT;
    w[44] =  + 0.02194381F * 80.F/(float)DT;
    w[45] =  - 0.00000000F * 80.F/(float)DT;
    w[46] =  - 0.00000000F * 80.F/(float)DT;
    w[47] =  - 0.00000000F * 80.F/(float)DT;
    w[48] =  - 0.00000000F * 80.F/(float)DT;
    w[49] =  - 0.00000000F * 80.F/(float)DT;
    w[50] =  - 0.00000000F * 80.F/(float)DT;
    w[51] =  - 0.00000000F * 80.F/(float)DT;
    w[52] =  - 0.00000000F * 80.F/(float)DT;
    w[53] =  - 0.00000000F * 80.F/(float)DT;
    w[54] =  - 0.02230685F * 80.F/(float)DT;

}



#else  // IS_2D 

void pn_clump_value(float w[100])
{
    
    // Source values
    //OK
    w[0] = 1.00000000F/(float)DT;
    w[1] = 0.00000000F/(float)DT;
    w[2] = 1.73096861F/(float)DT;
    w[3] = -0.00000000F/(float)DT;
    w[4] = -0.00170526F/(float)DT;
    w[5] = 0.00000000F/(float)DT;
    w[6] = 2.23188056F/(float)DT;
    w[7] = -0.00000000F/(float)DT;
    w[8] = -0.00170526F/(float)DT;
    w[9] = -0.00000000F/(float)DT;
    w[10] = -0.00450319F/(float)DT;
    w[11] = 0.00000000F/(float)DT;
    w[12] = 2.63585601F/(float)DT;
    w[13] = -0.00000000F/(float)DT;
    w[14] = -0.00450319F/(float)DT;
    w[15] = 0.00000000F/(float)DT;
    w[16] = 0.00000716F/(float)DT;
    w[17] = -0.00000000F/(float)DT;
    w[18] = -0.00882199F/(float)DT;
    w[19] = 0.00000000F/(float)DT;
    w[20] = 2.98133464F/(float)DT;
    w[21] = -0.00000000F/(float)DT;
    w[22] = -0.00882199F/(float)DT;
    w[23] = 0.00000000F/(float)DT;
    w[24] = 0.00000716F/(float)DT;
    w[25] = 0.00000000F/(float)DT;
    w[26] = 0.00002403F/(float)DT;
    w[27] = -0.00000000F/(float)DT;
    w[28] = -0.01485165F/(float)DT;
    w[29] = 0.00000000F/(float)DT;
    w[30] = 3.28574409F/(float)DT;
    w[31] = -0.00000000F/(float)DT;
    w[32] = -0.01485165F/(float)DT;
    w[33] = 0.00000000F/(float)DT;
    w[34] = 0.00002403F/(float)DT;
    w[35] = -0.00000000F/(float)DT;
    w[36] = -0.00000013F/(float)DT;
    w[37] = 0.00000000F/(float)DT;
    w[38] = 0.00005806F/(float)DT;
    w[39] = -0.00000000F/(float)DT;
    w[40] = -0.02274785F/(float)DT;
    w[41] = 0.00000000F/(float)DT;
    w[42] = 3.55868357F/(float)DT;
    w[43] = -0.00000000F/(float)DT;
    w[44] = -0.02274785F/(float)DT;
    w[45] = 0.00000000F/(float)DT;
    w[46] = 0.00005806F/(float)DT;
    w[47] = -0.00000000F/(float)DT;
    w[48] = -0.00000013F/(float)DT;
    w[49] = -0.00000000F/(float)DT;
    w[50] = -0.00000051F/(float)DT;
    w[51] = 0.00000000F/(float)DT;
    w[52] = 0.00011895F/(float)DT;
    w[53] = -0.00000000F/(float)DT;
    w[54] = -0.03264053F/(float)DT;
    w[55] = 0.00000000F/(float)DT;
    w[56] = 3.80607677F/(float)DT;
    w[57] = -0.00000000F/(float)DT;
    w[58] = -0.03264053F/(float)DT;
    w[59] = 0.00000000F/(float)DT;
    w[60] = 0.00011895F/(float)DT;
    w[61] = -0.00000000F/(float)DT;
    w[62] = -0.00000051F/(float)DT;
    w[63] = 0.00000000F/(float)DT;
    w[64] = 0.00000000F/(float)DT;
    w[65] = -0.00000000F/(float)DT;
    w[66] = -0.00000054F/(float)DT;
    w[67] = 0.00000000F/(float)DT;
    w[68] = 0.00021818F/(float)DT;
    w[69] = -0.00000000F/(float)DT;
    w[70] = -0.04463740F/(float)DT;
    w[71] = 0.00000000F/(float)DT;
    w[72] = 4.03186784F/(float)DT;
    w[73] = -0.00000000F/(float)DT;
    w[74] = -0.04463740F/(float)DT;
    w[75] = 0.00000000F/(float)DT;
    w[76] = 0.00021818F/(float)DT;
    w[77] = -0.00000000F/(float)DT;
    w[78] = -0.00000054F/(float)DT;
    w[79] = 0.00000000F/(float)DT;
    w[80] = 0.00000000F/(float)DT;
    w[81] = 0.00000000F/(float)DT;
    w[82] = 0.00000001F/(float)DT;
    w[83] = -0.00000000F/(float)DT;
    w[84] = -0.00000126F/(float)DT;
    w[85] = 0.00000000F/(float)DT;
    w[86] = 0.00036980F/(float)DT;
    w[87] = -0.00000000F/(float)DT;
    w[88] = -0.05882615F/(float)DT;
    w[89] = 0.00000000F/(float)DT;
    w[90] = 4.23883261F/(float)DT;
    w[91] = -0.00000000F/(float)DT;
    w[92] = -0.05882615F/(float)DT;
    w[93] = 0.00000000F/(float)DT;
    w[94] = 0.00036980F/(float)DT;
    w[95] = -0.00000000F/(float)DT;
    w[96] = -0.00000126F/(float)DT;
    w[97] = 0.00000000F/(float)DT;
    w[98] = 0.00000001F/(float)DT;
    w[99] = -0.00000000F/(float)DT;

}



#endif // IS_2D

#endif // USE_DOUBLE
#endif // USE_SPHERICAL_HARMONICS_P9
#ifdef USE_SPHERICAL_HARMONICS_P11
#ifdef USE_DOUBLE

#ifdef IS_2D

void pn_clump_value(double w[78])
{
    

    
    // Source values
    w[0] =  + 0.01250000000000000 * 80./DT;
    w[1] =  - 0.00000000000000000 * 80./DT;
    w[2] =  - 0.01529974556256406 * 80./DT;
    w[3] =  - 0.00000000000000000 * 80./DT;
    w[4] =  - 0.00000000000000000 * 80./DT;
    w[5] =  + 0.01707359254121643 * 80./DT;
    w[6] =  - 0.00000000000000000 * 80./DT;
    w[7] =  - 0.00000000000000000 * 80./DT;
    w[8] =  - 0.00000000000000000 * 80./DT;
    w[9] =  - 0.01838404766658733 * 80./DT;
    w[10] =  - 0.00000000000000000 * 80./DT;
    w[11] =  - 0.00000000000000000 * 80./DT;
    w[12] =  - 0.00000000000000000 * 80./DT;
    w[13] =  - 0.00000000000000000 * 80./DT;
    w[14] =  + 0.01941410437909303 * 80./DT;
    w[15] =  - 0.00000000000000000 * 80./DT;
    w[16] =  - 0.00000000000000000 * 80./DT;
    w[17] =  - 0.00000000000000000 * 80./DT;
    w[18] =  - 0.00000000000000000 * 80./DT;
    w[19] =  - 0.00000000000000000 * 80./DT;
    w[20] =  - 0.02024747150211771 * 80./DT;
    w[21] =  - 0.00000000000000000 * 80./DT;
    w[22] =  - 0.00000000000000000 * 80./DT;
    w[23] =  - 0.00000000000000000 * 80./DT;
    w[24] =  - 0.00000000000000000 * 80./DT;
    w[25] =  - 0.00000000000000000 * 80./DT;
    w[26] =  - 0.00000000000000000 * 80./DT;
    w[27] =  + 0.02092984802870677 * 80./DT;
    w[28] =  - 0.00000000000000000 * 80./DT;
    w[29] =  - 0.00000000000000000 * 80./DT;
    w[30] =  - 0.00000000000000000 * 80./DT;
    w[31] =  - 0.00000000000000000 * 80./DT;
    w[32] =  - 0.00000000000000000 * 80./DT;
    w[33] =  - 0.00000000000000000 * 80./DT;
    w[34] =  - 0.00000000000000000 * 80./DT;
    w[35] =  - 0.02148914042985427 * 80./DT;
    w[36] =  - 0.00000000000000000 * 80./DT;
    w[37] =  - 0.00000000000000000 * 80./DT;
    w[38] =  - 0.00000000000000000 * 80./DT;
    w[39] =  - 0.00000000000000000 * 80./DT;
    w[40] =  - 0.00000000000000000 * 80./DT;
    w[41] =  - 0.00000000000000000 * 80./DT;
    w[42] =  - 0.00000000000000000 * 80./DT;
    w[43] =  - 0.00000000000000000 * 80./DT;
    w[44] =  + 0.02194380839716444 * 80./DT;
    w[45] =  - 0.00000000000000000 * 80./DT;
    w[46] =  - 0.00000000000000000 * 80./DT;
    w[47] =  - 0.00000000000000000 * 80./DT;
    w[48] =  - 0.00000000000000000 * 80./DT;
    w[49] =  - 0.00000000000000000 * 80./DT;
    w[50] =  - 0.00000000000000000 * 80./DT;
    w[51] =  - 0.00000000000000000 * 80./DT;
    w[52] =  - 0.00000000000000000 * 80./DT;
    w[53] =  - 0.00000000000000000 * 80./DT;
    w[54] =  - 0.02230684613202838 * 80./DT;
    w[55] =  - 0.00000000000000000 * 80./DT;
    w[56] =  - 0.00000000000000000 * 80./DT;
    w[57] =  - 0.00000000000000000 * 80./DT;
    w[58] =  - 0.00000000000000000 * 80./DT;
    w[59] =  - 0.00000000000000000 * 80./DT;
    w[60] =  - 0.00000000000000000 * 80./DT;
    w[61] =  - 0.00000000000000000 * 80./DT;
    w[62] =  - 0.00000000000000000 * 80./DT;
    w[63] =  - 0.00000000000000000 * 80./DT;
    w[64] =  - 0.00000000000000000 * 80./DT;
    w[65] =  + 0.02258788532239639 * 80./DT;
    w[66] =  - 0.00000000000000000 * 80./DT;
    w[67] =  - 0.00000000000000000 * 80./DT;
    w[68] =  - 0.00000000000000000 * 80./DT;
    w[69] =  - 0.00000000000000000 * 80./DT;
    w[70] =  - 0.00000000000000000 * 80./DT;
    w[71] =  - 0.00000000000000000 * 80./DT;
    w[72] =  - 0.00000000000000000 * 80./DT;
    w[73] =  - 0.00000000000000000 * 80./DT;
    w[74] =  - 0.00000000000000000 * 80./DT;
    w[75] =  - 0.00000000000000000 * 80./DT;
    w[76] =  - 0.00000000000000000 * 80./DT;
    w[77] =  - 0.02279439326197448 * 80./DT;

}



#else  // IS_2D

void pn_clump_value( double w[144])
{
    

    
    // Source values
    //OK
    w[0] = 1.00000000000000000/DT;
    w[1] = 0.00000000000000001/DT;
    w[2] = 1.73096861321123185/DT;
    w[3] = -0.00000000000000001/DT;
    w[4] = -0.00170525596950163/DT;
    w[5] = 0.00000000000000001/DT;
    w[6] = 2.23188055519624395/DT;
    w[7] = -0.00000000000000001/DT;
    w[8] = -0.00170525596950163/DT;
    w[9] = -0.00000000000000000/DT;
    w[10] = -0.00450318542971045/DT;
    w[11] = 0.00000000000000002/DT;
    w[12] = 2.63585601040782436/DT;
    w[13] = -0.00000000000000002/DT;
    w[14] = -0.00450318542971045/DT;
    w[15] = 0.00000000000000000/DT;
    w[16] = 0.00000715790425901/DT;
    w[17] = -0.00000000000000000/DT;
    w[18] = -0.00882199000374003/DT;
    w[19] = 0.00000000000000003/DT;
    w[20] = 2.98133464020938987/DT;
    w[21] = -0.00000000000000003/DT;
    w[22] = -0.00882199000374002/DT;
    w[23] = 0.00000000000000000/DT;
    w[24] = 0.00000715790425901/DT;
    w[25] = 0.00000000000000000/DT;
    w[26] = 0.00002403320496504/DT;
    w[27] = -0.00000000000000000/DT;
    w[28] = -0.01485164870867023/DT;
    w[29] = 0.00000000000000004/DT;
    w[30] = 3.28574408611197377/DT;
    w[31] = -0.00000000000000004/DT;
    w[32] = -0.01485164870867023/DT;
    w[33] = 0.00000000000000000/DT;
    w[34] = 0.00002403320496504/DT;
    w[35] = -0.00000000000000000/DT;
    w[36] = -0.00000013199132439/DT;
    w[37] = 0.00000000000000000/DT;
    w[38] = 0.00005805763461744/DT;
    w[39] = -0.00000000000000000/DT;
    w[40] = -0.02274785095197682/DT;
    w[41] = 0.00000000000000005/DT;
    w[42] = 3.55868357405310620/DT;
    w[43] = -0.00000000000000005/DT;
    w[44] = -0.02274785095197682/DT;
    w[45] = 0.00000000000000000/DT;
    w[46] = 0.00005805763461744/DT;
    w[47] = -0.00000000000000000/DT;
    w[48] = -0.00000013199132439/DT;
    w[49] = -0.00000000000000000/DT;
    w[50] = -0.00000050885848363/DT;
    w[51] = 0.00000000000000000/DT;
    w[52] = 0.00011895254504411/DT;
    w[53] = -0.00000000000000000/DT;
    w[54] = -0.03264052648369914/DT;
    w[55] = 0.00000000000000007/DT;
    w[56] = 3.80607677152118695/DT;
    w[57] = -0.00000000000000007/DT;
    w[58] = -0.03264052648369914/DT;
    w[59] = 0.00000000000000000/DT;
    w[60] = 0.00011895254504411/DT;
    w[61] = -0.00000000000000000/DT;
    w[62] = -0.00000050885848363/DT;
    w[63] = 0.00000000000000000/DT;
    w[64] = 0.00000000128664625/DT;
    w[65] = -0.00000000000000000/DT;
    w[66] = -0.00000053653256184/DT;
    w[67] = 0.00000000000000000/DT;
    w[68] = 0.00021817688458739/DT;
    w[69] = -0.00000000000000000/DT;
    w[70] = -0.04463740372717866/DT;
    w[71] = 0.00000000000000008/DT;
    w[72] = 4.03186783896272782/DT;
    w[73] = -0.00000000000000008/DT;
    w[74] = -0.04463740372717866/DT;
    w[75] = 0.00000000000000000/DT;
    w[76] = 0.00021817688458739/DT;
    w[77] = -0.00000000000000000/DT;
    w[78] = -0.00000053653256184/DT;
    w[79] = 0.00000000000000000/DT;
    w[80] = 0.00000000128664625/DT;
    w[81] = 0.00000000000000000/DT;
    w[82] = 0.00000000557727326/DT;
    w[83] = -0.00000000000000000/DT;
    w[84] = -0.00000126029183083/DT;
    w[85] = 0.00000000000000000/DT;
    w[86] = 0.00036980315977988/DT;
    w[87] = -0.00000000000000000/DT;
    w[88] = -0.05882615062962795/DT;
    w[89] = 0.00000000000000009/DT;
    w[90] = 4.23883260795077277/DT;
    w[91] = -0.00000000000000009/DT;
    w[92] = -0.05882615062962796/DT;
    w[93] = 0.00000000000000000/DT;
    w[94] = 0.00036980315977988/DT;
    w[95] = -0.00000000000000000/DT;
    w[96] = -0.00000126029183083/DT;
    w[97] = 0.00000000000000000/DT;
    w[98] = 0.00000000557727326/DT;
    w[99] = -0.00000000000000000/DT;
    w[100] = -0.00000000001496941/DT;
    w[101] = 0.00000000000000000/DT;
    w[102] = 0.00000001748212248/DT;
    w[103] = -0.00000000000000000/DT;
    w[104] = -0.00000263190741488/DT;
    w[105] = 0.00000000000000000/DT;
    w[106] = 0.00059013433947991/DT;
    w[107] = -0.00000000000000000/DT;
    w[108] = -0.07527573154997716/DT;
    w[109] = 0.00000000000000011/DT;
    w[110] = 4.42901114057094247/DT;
    w[111] = -0.00000000000000011/DT;
    w[112] = -0.07527573154997716/DT;
    w[113] = 0.00000000000000000/DT;
    w[114] = 0.00059013433947991/DT;
    w[115] = -0.00000000000000000/DT;
    w[116] = -0.00000263190741488/DT;
    w[117] = 0.00000000000000000/DT;
    w[118] = 0.00000001748212248/DT;
    w[119] = -0.00000000000000000/DT;
    w[120] = -0.00000000001496941/DT;
    w[121] = -0.00000000000000000/DT;
    w[122] = -0.00000000007133791/DT;
    w[123] = 0.00000000000000000/DT;
    w[124] = 0.00000004573145538/DT;
    w[125] = -0.00000000000000000/DT;
    w[126] = -0.00000504111570107/DT;
    w[127] = 0.00000000000000000/DT;
    w[128] = 0.00089790953010763/DT;
    w[129] = -0.00000000000000000/DT;
    w[130] = -0.09403751371703890/DT;
    w[131] = 0.00000000000000012/DT;
    w[132] = 4.60395705370843089/DT;
    w[133] = -0.00000000000000012/DT;
    w[134] = -0.09403751371703888/DT;
    w[135] = 0.00000000000000000/DT;
    w[136] = 0.00089790953010763/DT;
    w[137] = -0.00000000000000000/DT;
    w[138] = -0.00000504111570107/DT;
    w[139] = 0.00000000000000000/DT;
    w[140] = 0.00000004573145538/DT;
    w[141] = -0.00000000000000000/DT;
    w[142] = -0.00000000007133791/DT;
    w[143] = 0.00000000000000000/DT;

}



#endif // IS_2D

#else  // USE_DOUBLE

#ifdef IS_2D

void pn_clump_value(float w[78])
{
    
    // Source values
    w[0] =  + 0.01250000F * 80.F/(float)DT;
    w[1] =  - 0.00000000F * 80.F/(float)DT;
    w[2] =  - 0.01529975F * 80.F/(float)DT;
    w[3] =  - 0.00000000F * 80.F/(float)DT;
    w[4] =  - 0.00000000F * 80.F/(float)DT;
    w[5] =  + 0.01707359F * 80.F/(float)DT;
    w[6] =  - 0.00000000F * 80.F/(float)DT;
    w[7] =  - 0.00000000F * 80.F/(float)DT;
    w[8] =  - 0.00000000F * 80.F/(float)DT;
    w[9] =  - 0.01838405F * 80.F/(float)DT;
    w[10] =  - 0.00000000F * 80.F/(float)DT;
    w[11] =  - 0.00000000F * 80.F/(float)DT;
    w[12] =  - 0.00000000F * 80.F/(float)DT;
    w[13] =  - 0.00000000F * 80.F/(float)DT;
    w[14] =  + 0.01941410F * 80.F/(float)DT;
    w[15] =  - 0.00000000F * 80.F/(float)DT;
    w[16] =  - 0.00000000F * 80.F/(float)DT;
    w[17] =  - 0.00000000F * 80.F/(float)DT;
    w[18] =  - 0.00000000F * 80.F/(float)DT;
    w[19] =  - 0.00000000F * 80.F/(float)DT;
    w[20] =  - 0.02024747F * 80.F/(float)DT;
    w[21] =  - 0.00000000F * 80.F/(float)DT;
    w[22] =  - 0.00000000F * 80.F/(float)DT;
    w[23] =  - 0.00000000F * 80.F/(float)DT;
    w[24] =  - 0.00000000F * 80.F/(float)DT;
    w[25] =  - 0.00000000F * 80.F/(float)DT;
    w[26] =  - 0.00000000F * 80.F/(float)DT;
    w[27] =  + 0.02092985F * 80.F/(float)DT;
    w[28] =  - 0.00000000F * 80.F/(float)DT;
    w[29] =  - 0.00000000F * 80.F/(float)DT;
    w[30] =  - 0.00000000F * 80.F/(float)DT;
    w[31] =  - 0.00000000F * 80.F/(float)DT;
    w[32] =  - 0.00000000F * 80.F/(float)DT;
    w[33] =  - 0.00000000F * 80.F/(float)DT;
    w[34] =  - 0.00000000F * 80.F/(float)DT;
    w[35] =  - 0.02148914F * 80.F/(float)DT;
    w[36] =  - 0.00000000F * 80.F/(float)DT;
    w[37] =  - 0.00000000F * 80.F/(float)DT;
    w[38] =  - 0.00000000F * 80.F/(float)DT;
    w[39] =  - 0.00000000F * 80.F/(float)DT;
    w[40] =  - 0.00000000F * 80.F/(float)DT;
    w[41] =  - 0.00000000F * 80.F/(float)DT;
    w[42] =  - 0.00000000F * 80.F/(float)DT;
    w[43] =  - 0.00000000F * 80.F/(float)DT;
    w[44] =  + 0.02194381F * 80.F/(float)DT;
    w[45] =  - 0.00000000F * 80.F/(float)DT;
    w[46] =  - 0.00000000F * 80.F/(float)DT;
    w[47] =  - 0.00000000F * 80.F/(float)DT;
    w[48] =  - 0.00000000F * 80.F/(float)DT;
    w[49] =  - 0.00000000F * 80.F/(float)DT;
    w[50] =  - 0.00000000F * 80.F/(float)DT;
    w[51] =  - 0.00000000F * 80.F/(float)DT;
    w[52] =  - 0.00000000F * 80.F/(float)DT;
    w[53] =  - 0.00000000F * 80.F/(float)DT;
    w[54] =  - 0.02230685F * 80.F/(float)DT;
    w[55] =  - 0.00000000F * 80.F/(float)DT;
    w[56] =  - 0.00000000F * 80.F/(float)DT;
    w[57] =  - 0.00000000F * 80.F/(float)DT;
    w[58] =  - 0.00000000F * 80.F/(float)DT;
    w[59] =  - 0.00000000F * 80.F/(float)DT;
    w[60] =  - 0.00000000F * 80.F/(float)DT;
    w[61] =  - 0.00000000F * 80.F/(float)DT;
    w[62] =  - 0.00000000F * 80.F/(float)DT;
    w[63] =  - 0.00000000F * 80.F/(float)DT;
    w[64] =  - 0.00000000F * 80.F/(float)DT;
    w[65] =  + 0.02258789F * 80.F/(float)DT;
    w[66] =  - 0.00000000F * 80.F/(float)DT;
    w[67] =  - 0.00000000F * 80.F/(float)DT;
    w[68] =  - 0.00000000F * 80.F/(float)DT;
    w[69] =  - 0.00000000F * 80.F/(float)DT;
    w[70] =  - 0.00000000F * 80.F/(float)DT;
    w[71] =  - 0.00000000F * 80.F/(float)DT;
    w[72] =  - 0.00000000F * 80.F/(float)DT;
    w[73] =  - 0.00000000F * 80.F/(float)DT;
    w[74] =  - 0.00000000F * 80.F/(float)DT;
    w[75] =  - 0.00000000F * 80.F/(float)DT;
    w[76] =  - 0.00000000F * 80.F/(float)DT;
    w[77] =  - 0.02279439F * 80.F/(float)DT;

}



#else  // IS_2D 

void pn_clump_value(float w[144])
{
    
    // Source values
    //OK
    w[0] = 1.00000000F/(float)DT;
    w[1] = 0.00000000F/(float)DT;
    w[2] = 1.73096861F/(float)DT;
    w[3] = -0.00000000F/(float)DT;
    w[4] = -0.00170526F/(float)DT;
    w[5] = 0.00000000F/(float)DT;
    w[6] = 2.23188056F/(float)DT;
    w[7] = -0.00000000F/(float)DT;
    w[8] = -0.00170526F/(float)DT;
    w[9] = -0.00000000F/(float)DT;
    w[10] = -0.00450319F/(float)DT;
    w[11] = 0.00000000F/(float)DT;
    w[12] = 2.63585601F/(float)DT;
    w[13] = -0.00000000F/(float)DT;
    w[14] = -0.00450319F/(float)DT;
    w[15] = 0.00000000F/(float)DT;
    w[16] = 0.00000716F/(float)DT;
    w[17] = -0.00000000F/(float)DT;
    w[18] = -0.00882199F/(float)DT;
    w[19] = 0.00000000F/(float)DT;
    w[20] = 2.98133464F/(float)DT;
    w[21] = -0.00000000F/(float)DT;
    w[22] = -0.00882199F/(float)DT;
    w[23] = 0.00000000F/(float)DT;
    w[24] = 0.00000716F/(float)DT;
    w[25] = 0.00000000F/(float)DT;
    w[26] = 0.00002403F/(float)DT;
    w[27] = -0.00000000F/(float)DT;
    w[28] = -0.01485165F/(float)DT;
    w[29] = 0.00000000F/(float)DT;
    w[30] = 3.28574409F/(float)DT;
    w[31] = -0.00000000F/(float)DT;
    w[32] = -0.01485165F/(float)DT;
    w[33] = 0.00000000F/(float)DT;
    w[34] = 0.00002403F/(float)DT;
    w[35] = -0.00000000F/(float)DT;
    w[36] = -0.00000013F/(float)DT;
    w[37] = 0.00000000F/(float)DT;
    w[38] = 0.00005806F/(float)DT;
    w[39] = -0.00000000F/(float)DT;
    w[40] = -0.02274785F/(float)DT;
    w[41] = 0.00000000F/(float)DT;
    w[42] = 3.55868357F/(float)DT;
    w[43] = -0.00000000F/(float)DT;
    w[44] = -0.02274785F/(float)DT;
    w[45] = 0.00000000F/(float)DT;
    w[46] = 0.00005806F/(float)DT;
    w[47] = -0.00000000F/(float)DT;
    w[48] = -0.00000013F/(float)DT;
    w[49] = -0.00000000F/(float)DT;
    w[50] = -0.00000051F/(float)DT;
    w[51] = 0.00000000F/(float)DT;
    w[52] = 0.00011895F/(float)DT;
    w[53] = -0.00000000F/(float)DT;
    w[54] = -0.03264053F/(float)DT;
    w[55] = 0.00000000F/(float)DT;
    w[56] = 3.80607677F/(float)DT;
    w[57] = -0.00000000F/(float)DT;
    w[58] = -0.03264053F/(float)DT;
    w[59] = 0.00000000F/(float)DT;
    w[60] = 0.00011895F/(float)DT;
    w[61] = -0.00000000F/(float)DT;
    w[62] = -0.00000051F/(float)DT;
    w[63] = 0.00000000F/(float)DT;
    w[64] = 0.00000000F/(float)DT;
    w[65] = -0.00000000F/(float)DT;
    w[66] = -0.00000054F/(float)DT;
    w[67] = 0.00000000F/(float)DT;
    w[68] = 0.00021818F/(float)DT;
    w[69] = -0.00000000F/(float)DT;
    w[70] = -0.04463740F/(float)DT;
    w[71] = 0.00000000F/(float)DT;
    w[72] = 4.03186784F/(float)DT;
    w[73] = -0.00000000F/(float)DT;
    w[74] = -0.04463740F/(float)DT;
    w[75] = 0.00000000F/(float)DT;
    w[76] = 0.00021818F/(float)DT;
    w[77] = -0.00000000F/(float)DT;
    w[78] = -0.00000054F/(float)DT;
    w[79] = 0.00000000F/(float)DT;
    w[80] = 0.00000000F/(float)DT;
    w[81] = 0.00000000F/(float)DT;
    w[82] = 0.00000001F/(float)DT;
    w[83] = -0.00000000F/(float)DT;
    w[84] = -0.00000126F/(float)DT;
    w[85] = 0.00000000F/(float)DT;
    w[86] = 0.00036980F/(float)DT;
    w[87] = -0.00000000F/(float)DT;
    w[88] = -0.05882615F/(float)DT;
    w[89] = 0.00000000F/(float)DT;
    w[90] = 4.23883261F/(float)DT;
    w[91] = -0.00000000F/(float)DT;
    w[92] = -0.05882615F/(float)DT;
    w[93] = 0.00000000F/(float)DT;
    w[94] = 0.00036980F/(float)DT;
    w[95] = -0.00000000F/(float)DT;
    w[96] = -0.00000126F/(float)DT;
    w[97] = 0.00000000F/(float)DT;
    w[98] = 0.00000001F/(float)DT;
    w[99] = -0.00000000F/(float)DT;
    w[100] = -0.00000000F/(float)DT;
    w[101] = 0.00000000F/(float)DT;
    w[102] = 0.00000002F/(float)DT;
    w[103] = -0.00000000F/(float)DT;
    w[104] = -0.00000263F/(float)DT;
    w[105] = 0.00000000F/(float)DT;
    w[106] = 0.00059013F/(float)DT;
    w[107] = -0.00000000F/(float)DT;
    w[108] = -0.07527573F/(float)DT;
    w[109] = 0.00000000F/(float)DT;
    w[110] = 4.42901114F/(float)DT;
    w[111] = -0.00000000F/(float)DT;
    w[112] = -0.07527573F/(float)DT;
    w[113] = 0.00000000F/(float)DT;
    w[114] = 0.00059013F/(float)DT;
    w[115] = -0.00000000F/(float)DT;
    w[116] = -0.00000263F/(float)DT;
    w[117] = 0.00000000F/(float)DT;
    w[118] = 0.00000002F/(float)DT;
    w[119] = -0.00000000F/(float)DT;
    w[120] = -0.00000000F/(float)DT;
    w[121] = -0.00000000F/(float)DT;
    w[122] = -0.00000000F/(float)DT;
    w[123] = 0.00000000F/(float)DT;
    w[124] = 0.00000005F/(float)DT;
    w[125] = -0.00000000F/(float)DT;
    w[126] = -0.00000504F/(float)DT;
    w[127] = 0.00000000F/(float)DT;
    w[128] = 0.00089791F/(float)DT;
    w[129] = -0.00000000F/(float)DT;
    w[130] = -0.09403751F/(float)DT;
    w[131] = 0.00000000F/(float)DT;
    w[132] = 4.60395705F/(float)DT;
    w[133] = -0.00000000F/(float)DT;
    w[134] = -0.09403751F/(float)DT;
    w[135] = 0.00000000F/(float)DT;
    w[136] = 0.00089791F/(float)DT;
    w[137] = -0.00000000F/(float)DT;
    w[138] = -0.00000504F/(float)DT;
    w[139] = 0.00000000F/(float)DT;
    w[140] = 0.00000005F/(float)DT;
    w[141] = -0.00000000F/(float)DT;
    w[142] = -0.00000000F/(float)DT;
    w[143] = 0.00000000F/(float)DT;

}



#endif // IS_2D

#endif // USE_DOUBLE
#endif // USE_SPHERICAL_HARMONICS_P11

